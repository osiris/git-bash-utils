#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2014 Osiris Alejandro Gomez <osiux@osiux.com.ar>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# white='[0m'
# green='[01;32m'
# red='[01;31m'
# yellow='[01;33m'

CLONE=0
PUSH=0
PULL=0
TAGS_FETCH=0
TAGS_PUSH=0
DELETE=0
SHOW_LOG=0
SHOW_TIME=0
FILTER=''
EXCLUDE=''
ZERO_COMMITS=0

BIN=$(basename "$0")

function usage()
{
cat << EOF

Usage:

  $BIN [options]

Mantain a collection of git repositories using .git-repos defined in
local directory or in ~/.git-repos

    -c  clone
    -d  delete
    -D  redefine directory DIR_GIT, by default use current directory
    -f  filter repository list
    -g  show log
    -l  pull repositories
    -a  fetch tags
    -A  push tags
    -s  push
    -t  show time
    -x  exclude
    -z  dont show repositories without commits (zero commits)

Examples:

  Pull repositories

    $BIN -l

  Clone repositories

    $BIN -c

  Push all repositories

EOF
exit 0
}

GIT_CONFIG="$HOME/.git-repos.cfg"

if [[ -e "$GIT_CONFIG" ]]
then

eval $(sed '/:/!d;/^ *#/d;s/:/ /;' < "$GIT_CONFIG" | while read -r k v
do
    str="$k='$v'"
    echo "$str"
done)

fi

repo_error ()
{
  S="${red}âœ–"
  printf " %s%s %-36s %s%-13s %s %s\n" "$S" "$yellow" "$REPO_NAME" "$red" "$1" "$green"
}

die()
{
  printf "\\n%sERROR %s%s\\n" "$red" "$1" "$white"
  exit 1
}

if [[ -e "$PWD/.git-repos" ]]
then
  REPOS="$PWD/.git-repos"
  DIR_GIT="$PWD"
else
  REPOS="$HOME/.git-repos"
  DIR_GIT="$HOME"
fi

[[ -e "$REPOS" ]] || die "NOT FOUND $REPOS"

while getopts "AcdD:f:ghltsx:z" OPTION
do
  case "$OPTION" in
    A)
      ANSI=1
      ;;
    c)
      CLONE=1
      ;;
    d)
      DELETE=1
      ;;
    D)
      DIR_GIT="$OPTARG"
      ;;
    f)
      FILTER="$OPTARG"
      ;;
    g)
      SHOW_LOG=1
      ;;
    h)
      usage
      ;;
    l)
      PULL=1
      ;;
    a)
      TAGS_FETCH=1
      ;;
    A)
      TAGS_PUSH=1
      ;;
    s)
      PUSH=1
      ;;
    t)
      SHOW_TIME=1
      ;;
    x)
      EXCLUDE="$OPTARG"
      ;;
    z)
      ZERO_COMMITS=1
      ;;
  esac
done

[[ ! -d "$DIR_GIT" ]] && mkdir "$DIR_GIT"

if [[ "$ANSI" -eq 1 ]]
then
  white='[0m'
  green='[01;32m'
  red='[01;31m'
  yellow='[01;33m'
else
  white=''
  green=''
  red=''
  yellow=''
fi

echo

if [[ -z "$FILTER" ]]
then
  if [[ -z "$EXCLUDE" ]]
  then
    GIT_REPOS="$(egrep -v "^#" "$REPOS")"
  else
    GIT_REPOS="$(egrep -v "^#" "$REPOS" | egrep -v "$EXCLUDE")"
  fi
else
  if [[ -z "$EXCLUDE" ]]
  then
    GIT_REPOS="$(grep -E "$FILTER" "$REPOS" 2>/dev/null | grep -vE "^#" 2>/dev/null)"
  else
    GIT_REPOS="$(grep -E "$FILTER" "$REPOS" | grep -vE "^#" | grep -v "$EXCLUDE")"
  fi
fi

echo "$GIT_REPOS" | sort | while read -r D GIT
do

  ABSOLUT="$(echo "$D" | cut -c -1)"

  if [[ "$ABSOLUT" = '/' ]]
  then
    DIR="$D"
  else
    DIR="$DIR_GIT/$D"
  fi

  REPO_NAME="$(echo "$DIR" | rev | cut -d'/' -f1 | rev)"

  echo -n "$white"

  if [[ "$DELETE" -eq 1 ]]
  then
      mv -vi "$DIR" "${DIR}.bak"
  fi

  if [[ ! -d "$DIR" ]]
  then
    if [[ "$CLONE" -eq 1 ]]
    then
      git clone "$GIT" "$DIR"
      ERROR="$?"
      echo "$ERROR"
    else
      repo_error 'NOT FOUND REPO. TRY WITH -c'
      continue
    fi
  fi

  if [[ ! -d "$DIR/.git" ]]
  then
      repo_error 'NOT VALID GIT REPO. TRY WITH -c'
      continue
  fi

  if [[ "$PUSH" -eq 1 ]]
  then
    cd "$DIR"
    HTTPS="$(grep -Eo "$DIR.*https" "$REPOS" | awk '{print $2}' | head -1)"

    if [[ "$HTTPS" != "https" ]]
    then
      if [[ "$TAGS_PUSH" -eq 1 ]]
      then
        git push --tags -q 2>/dev/null 1>/dev/null
      else
        git push -q 2>/dev/null 1>/dev/null
      fi
    fi
  fi

  if [[ "$TAGS_FETCH" -eq 1 ]]
  then
    cd "$DIR" && git fetch --tags 2>/dev/null 1>/dev/null
  fi

  if [[ "$PULL" -eq 1 ]]
  then
    cd "$DIR" && git pull -q 2>/dev/null 1>/dev/null
    ERROR="$?"

    if [[ "$ERROR" -eq 128 ]]
    then
      if [[ "$CLONE" -eq 1 ]]
      then
        mv "$DIR" "${DIR}.bak"
        git clone "$GIT" "$DIR"
      else
        repo_error 'NOT VALID GIT REPO. TRY WITH -c'
        continue
      fi
    fi
  fi

  E="$?"

  if [[ "$E" -eq 0 ]]
  then
    S="${green}âœ”"
  else
    S="${red}âœ–"
  fi

  LAST_TAG=$(cd "$DIR" && git tag -l --sort=-v:refname | head -1)
  if [[ ! -z "$LAST_TAG" ]]
  then
    REPO_NAME="$yellow$REPO_NAME $white($LAST_TAG)"
  else
    REPO_NAME="$yellow$REPO_NAME $white"
  fi

  BAR=$(cd "$DIR" && git-streak)

  NO_COMMITS=$(echo "$BAR" | grep -o "00")

  if [[ "$ZERO_COMMITS" -eq 0 ]]
  then
    if [[ "$NO_COMMITS" == "00" ]]
    then
      if [[ "$E" -eq 0 ]]
      then
        continue
      fi
    fi
  fi

  if [[ "$SHOW_TIME" -eq 1 ]]
  then
    HOURS=$(git log | egrep -o '@(.*)[0-9]{2}:[0-9]{2}' | tr -d '@ ' | awk 'function m(h) {split(h,A,":");return A[1]*60+A[2]} {t+=m($1)} END {printf "%02d:%02d",t/(60),t%60}')
    printf " %s%s %s %-20s %10s %-20s %s\n" "$S" "$yellow" "$BAR" "$LAST_TAG" "$HOURS" "$REPO_NAME" "$GIT"
  else
    printf " %s %-50s %s %s\n" "$S" "$REPO_NAME" "$BAR" "$GIT"
  fi

  if [[ "$SHOW_LOG" -eq 1 ]]
  then
    LOG=$(git log -1 --topo-order --date=iso --pretty --format="%h %ad %ae %s" | sed s/:[0-9]*\ -[0-9]*\ /\ /g | sed s/@[a-z.\(\)]*/\\\t/g)
    echo -e "${white}\t  $LOG"
  fi
done

echo "$white"

